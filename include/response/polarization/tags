!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ChronusQ	hartreefock.hpp	/^namespace ChronusQ {$/;"	n
ChronusQ	kohnsham.hpp	/^namespace ChronusQ {$/;"	n
ChronusQ	neoss.hpp	/^namespace ChronusQ {$/;"	n
ChronusQ	singleslater.hpp	/^namespace ChronusQ {$/;"	n
ChronusQ	singleslater_helper.hpp	/^namespace ChronusQ {$/;"	n
configOptions	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::configOptions() {$/;"	f	class:ChronusQ::PolarizationPropagator
constructShifts	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::constructShifts() {$/;"	f	class:ChronusQ::PolarizationPropagator
eigVecNorm	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::eigVecNorm() {$/;"	f	class:ChronusQ::PolarizationPropagator
formFullFromMemory	singleslater.hpp	/^  MatsT * PolarizationPropagator<SingleSlater<MatsT, IntsT>>::formFullFromMemory() {$/;"	f	class:ChronusQ::PolarizationPropagator
formFullMatrix	singleslater.hpp	/^  MatsT * PolarizationPropagator<SingleSlater<MatsT, IntsT>>::formFullMatrix() {$/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	hartreefock.hpp	/^  void PolarizationPropagator<HartreeFock<dcomplex,dcomplex>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	hartreefock.hpp	/^  void PolarizationPropagator<HartreeFock<dcomplex,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	hartreefock.hpp	/^  void PolarizationPropagator<HartreeFock<double,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	kohnsham.hpp	/^  void PolarizationPropagator<KohnSham<dcomplex,dcomplex>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	kohnsham.hpp	/^  void PolarizationPropagator<KohnSham<dcomplex,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	kohnsham.hpp	/^  void PolarizationPropagator<KohnSham<double,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	neoss.hpp	/^	void PolarizationPropagator<NEOSS<dcomplex,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	neoss.hpp	/^	void PolarizationPropagator<NEOSS<double,double>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct	neoss.hpp	/^  void PolarizationPropagator<NEOSS<dcomplex,dcomplex>>::formLinearTrans_direct($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct_helper	singleslater_helper.hpp	/^  void formLinearTrans_direct_helper(MPI_Comm c, Resp & res,$/;"	f	namespace:ChronusQ
formLinearTrans_direct_impl	hartreefock.hpp	/^  void PolarizationPropagator<HartreeFock<MatsT, IntsT>>::formLinearTrans_direct_impl($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct_impl	kohnsham.hpp	/^  void PolarizationPropagator<KohnSham<MatsT, IntsT>>::formLinearTrans_direct_impl($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_direct_impl	neoss.hpp	/^	void PolarizationPropagator<NEOSS<MatsT, IntsT>>::formLinearTrans_direct_impl($/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_incore	singleslater.hpp	/^  void PolarizationPropagator< SingleSlater<double,double> >::formLinearTrans_incore( $/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_incore	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<dcomplex,dcomplex>>::formLinearTrans_incore( $/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_incore	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<dcomplex,double>>::formLinearTrans_incore( $/;"	f	class:ChronusQ::PolarizationPropagator
formLinearTrans_incore_impl	singleslater.hpp	/^  void PolarizationPropagator< SingleSlater<MatsT, IntsT> >::formLinearTrans_incore_impl( $/;"	f	class:ChronusQ::PolarizationPropagator
formPropGrad	singleslater.hpp	/^    PolarizationPropagator<SingleSlater<MatsT, IntsT>>::formPropGrad($/;"	f	class:ChronusQ::PolarizationPropagator
formRHS	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::formRHS() {$/;"	f	class:ChronusQ::PolarizationPropagator
getMOContributions	singleslater.hpp	/^    PolarizationPropagator<SingleSlater<MatsT, IntsT>>::getMOContributions(U *V, $/;"	f	class:ChronusQ::PolarizationPropagator
phEpsilonScale	singleslater.hpp	/^  void PolarizationPropagator< SingleSlater<MatsT, IntsT> >::phEpsilonScale(bool doInc, $/;"	f	class:ChronusQ::PolarizationPropagator
phTransitionVecAO2MO	singleslater.hpp	/^  void PolarizationPropagator< SingleSlater<MatsT, IntsT> >::phTransitionVecAO2MO($/;"	f	class:ChronusQ::PolarizationPropagator
phTransitionVecMO2AO	singleslater.hpp	/^    PolarizationPropagator< SingleSlater<MatsT, IntsT> >::phTransitionVecMO2AO($/;"	f	class:ChronusQ::PolarizationPropagator
postLinearSolve	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::postLinearSolve() {$/;"	f	class:ChronusQ::PolarizationPropagator
preConditioner	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::preConditioner(size_t nVec, $/;"	f	class:ChronusQ::PolarizationPropagator
printResMO_impl	singleslater.hpp	/^  void PolarizationPropagator<SingleSlater<MatsT, IntsT>>::printResMO_impl($/;"	f	class:ChronusQ::PolarizationPropagator
resGuess	singleslater.hpp	/^  void PolarizationPropagator< SingleSlater<MatsT, IntsT> >::resGuess($/;"	f	class:ChronusQ::PolarizationPropagator
